import time
from a_star_solver import a_star_solver
from backtracking_solver import backtracking
from brute_force_solver import solve_brute_force  # Import gi·∫£i ph√°p brute-force

def compare_algorithms(board):
    """So s√°nh th·ªùi gian ch·∫°y c·ªßa A*, Backtracking v√† Brute-force."""
    print("\nƒêang so s√°nh c√°c thu·∫≠t to√°n...")

    # Ch·∫°y A*
    board_copy = board.clone()
    start_time = time.time()
    a_star_solver(board_copy, "solution.cnf")
    a_star_time = time.time() - start_time
    print(f"\nA* ho√†n th√†nh trong {a_star_time:.4f} gi√¢y.")

    # Ch·∫°y Backtracking
    board_copy = board.clone()
    start_time = time.time()
    backtracking(board_copy)
    backtracking_time = time.time() - start_time
    print(f"\nBacktracking ho√†n th√†nh trong {backtracking_time:.4f} gi√¢y.")

    # Ch·∫°y Brute-force
    board_copy = board.clone()
    start_time = time.time()
    solve_brute_force(board_copy)
    brute_force_time = time.time() - start_time
    print(f"\nBrute-force ho√†n th√†nh trong {brute_force_time:.4f} gi√¢y.")

    # So s√°nh k·∫øt qu·∫£
    best_time = min(a_star_time, backtracking_time, brute_force_time)
    print("\nüÜö K·∫øt qu·∫£ so s√°nh:")
    if best_time == a_star_time:
        print("üîπ A* nhanh nh·∫•t.")
    elif best_time == backtracking_time:
        print("üîπ Backtracking nhanh nh·∫•t.")
    else:
        print("üîπ Brute-force nhanh nh·∫•t.")

    print(f"‚è≥ Th·ªùi gian: A* = {a_star_time:.4f}s, Backtracking = {backtracking_time:.4f}s, Brute-force = {brute_force_time:.4f}s.")
